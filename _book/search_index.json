[["an-example-workflow.html", "Topic 3 An Example Workflow", " Topic 3 An Example Workflow Like I mentioned at the beginning of the chapter, people who I used to work with didnt usually deliver (at least to my standards). While I believe that this is largely my fault, the person isnt completely blame-free either. Figure 3.1: Me, Deep Down Inside, When I Look at Subpar Work On one hand, I have no qualms with working with beginners as long as they are willing to put in the effort to learn, but this also means that I lose any rights to complain too much about the quality of their work. And yet, even after directing them to resources to read up on or consult for hackathons, they still struggle with tasks that have been very clearly covered in those resources. This leads me to suspect one of several things: The person is seriously struggling and desperately needs help. The person is lazy. Im asking too much from them. The person cant deliver because they still dont understand what Im looking for. Fortunately, I think points 1., 3., and 4. can be addressed with an example to set the bar. Point 2., on the contrary, is one that I have no power over. If you cannot even be bothered to at least try, then I wonder why it is that you even signed up for the hackathon in the first place1. Nevertheless, Mind you, this workflow that I came up with isnt 100% perfect, but it will give you a good idea of what I expect from you. Without further ado, hit the right arrow key on your keyboard to begin viewing my workflow! And yes, Id kick you off the team too if the events rules allow for it. "],["the-problem-at-hand.html", "3.1 The Problem at Hand", " 3.1 The Problem at Hand Figure 3.2: 3D Rendering of the RMS Titanic The sinking of the RMS Titanic is widely considered to be one of the worst accidents in maritime history. The once-thought unsinkable ship sank after it collided with an iceberg on April 15, 1912. Unfortunately, there werent enough lifeboats on deck for all passengers, hence resulting in the deaths of 1502 out of 2224 total passengers and crew. While there was some element of luck involved in ones survival, official data also suggests that certain kind(s) of people were likelier to survive than others. Hence, our task is to design a predictive model that uses passenger data (i.e., a passengers name, their passenger class, their ticket fares, etc.) to answer the following question: which kind(s) of people are likelier to survive the sinking of the RMS Titanic? "],["setting-up-the-workspace.html", "3.2 Setting up the Workspace", " 3.2 Setting up the Workspace Before we begin doing any anything, its always a good idea to ensure that you have all the tools that you need. Not only does this make our workflow easier to follow, but it also prevents us from being too distracted2. First things first, I will set my working directory to my machines Downloads folder where the data for this competition is stored3: setwd(&quot;C:/Users/Kevin/Downloads&quot;) Then, I will load in the following packages: library(tidyverse) ; library(ggplot2) ; library(corrplot) library(caret) Dont worry if you dont know what some of these packages do - I will explain them below: tidyverse This isnt technically a package per se, but a collection of packages. The tidyverse is a collection of packages authored by Hadley Wickham that obey his tidy data principle4. Theese packages (along with a brief statement on what they do) are: tidyr - for tidying data. purrr - for functional programming. dplyr - for manipulating data. readr - for reading in data. stringr - for manipulating strings. The tidyverse packages provide a more intuitive solution to base Rs syntax, and for that reason, I will be using functions from the above five packages often. Moreover, calling library(tidyverse) will also load in another package: magrittr - this package provides many new operators, of which the pipe operator %&gt;% is the most used (and will also be frequently used in this R Markdown document). Consider the following code block that calls three functions foo(), bar(), and baz() on some variable a (i.e., nested function calls): # Can become hard to read depending on what you&#39;re doing! foo(bar(baz(a))) The following expression - using %&gt;% - also performs the same set of actions: # Much nicer and easier to read in my opinion! a %&gt;% baz() %&gt;% bar() %&gt;% foo() This notation can be especially handy depending on what youre trying to do! ggplot2 If youve taken BS0004, then you probably already know what this does. Otherwise, if youve forgotten or havent heard of this package before, then know that its a package authored by Hadley Wickham that is used to produce presentation-quality graphs. caret caret is an acronym for classification and regression training. I will be using this package to train our predictor (i.e., machine learning model). corrplot This package will be used to construct correlation plots. Now that we have all tools that we need, we can proceed on to the next part: examining the structure of our data and cleaning it if need be. That is, you dont want your train of thought to be disrupted. Im using an absolute path here - if you are sending your code to others, its best practice to avoid doing this! If you want a TL;DR version, tidy data is data that has one variable per column and one observation per row. "],["data-cleaning.html", "3.3 Data Cleaning", " 3.3 Data Cleaning Lets begin this part of our workflow by reading in our competitions data into our current R session: modelData &lt;- read_csv(&quot;train(1).csv&quot;) testData &lt;- read_csv(&quot;test(1).csv&quot;) Do note the following at this point: modelData is a variable that will host our competitions training data. That is, we will be using this .csv file (and only this .csv file) to train our predictive model(s). testData is our testing set. Once we are happy with our predictive models performance, we will then apply it to testData and submit our predictions off to Kaggle to be evaluated. Ill then call the str() function to take a quick look at modelData and testData: str(modelData) ## spec_tbl_df [891 x 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ PassengerId: num [1:891] 1 2 3 4 5 6 7 8 9 10 ... ## $ Survived : num [1:891] 0 1 1 1 0 0 0 0 1 1 ... ## $ Pclass : num [1:891] 3 1 3 1 3 3 1 3 3 2 ... ## $ Name : chr [1:891] &quot;Braund, Mr. Owen Harris&quot; &quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot; &quot;Heikkinen, Miss. Laina&quot; &quot;Futrelle, Mrs. Jacques Heath (Lily May Peel)&quot; ... ## $ Sex : chr [1:891] &quot;male&quot; &quot;female&quot; &quot;female&quot; &quot;female&quot; ... ## $ Age : num [1:891] 22 38 26 35 35 NA 54 2 27 14 ... ## $ SibSp : num [1:891] 1 1 0 1 0 0 0 3 0 1 ... ## $ Parch : num [1:891] 0 0 0 0 0 0 0 1 2 0 ... ## $ Ticket : chr [1:891] &quot;A/5 21171&quot; &quot;PC 17599&quot; &quot;STON/O2. 3101282&quot; &quot;113803&quot; ... ## $ Fare : num [1:891] 7.25 71.28 7.92 53.1 8.05 ... ## $ Cabin : chr [1:891] NA &quot;C85&quot; NA &quot;C123&quot; ... ## $ Embarked : chr [1:891] &quot;S&quot; &quot;C&quot; &quot;S&quot; &quot;S&quot; ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. PassengerId = col_double(), ## .. Survived = col_double(), ## .. Pclass = col_double(), ## .. Name = col_character(), ## .. Sex = col_character(), ## .. Age = col_double(), ## .. SibSp = col_double(), ## .. Parch = col_double(), ## .. Ticket = col_character(), ## .. Fare = col_double(), ## .. Cabin = col_character(), ## .. Embarked = col_character() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; str(testData) ## spec_tbl_df [418 x 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ PassengerId: num [1:418] 892 893 894 895 896 897 898 899 900 901 ... ## $ Pclass : num [1:418] 3 3 2 3 3 3 3 2 3 3 ... ## $ Name : chr [1:418] &quot;Kelly, Mr. James&quot; &quot;Wilkes, Mrs. James (Ellen Needs)&quot; &quot;Myles, Mr. Thomas Francis&quot; &quot;Wirz, Mr. Albert&quot; ... ## $ Sex : chr [1:418] &quot;male&quot; &quot;female&quot; &quot;male&quot; &quot;male&quot; ... ## $ Age : num [1:418] 34.5 47 62 27 22 14 30 26 18 21 ... ## $ SibSp : num [1:418] 0 1 0 0 1 0 0 1 0 2 ... ## $ Parch : num [1:418] 0 0 0 0 1 0 0 1 0 0 ... ## $ Ticket : chr [1:418] &quot;330911&quot; &quot;363272&quot; &quot;240276&quot; &quot;315154&quot; ... ## $ Fare : num [1:418] 7.83 7 9.69 8.66 12.29 ... ## $ Cabin : chr [1:418] NA NA NA NA ... ## $ Embarked : chr [1:418] &quot;Q&quot; &quot;S&quot; &quot;Q&quot; &quot;S&quot; ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. PassengerId = col_double(), ## .. Pclass = col_double(), ## .. Name = col_character(), ## .. Sex = col_character(), ## .. Age = col_double(), ## .. SibSp = col_double(), ## .. Parch = col_double(), ## .. Ticket = col_character(), ## .. Fare = col_double(), ## .. Cabin = col_character(), ## .. Embarked = col_character() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; From the look of it, it doesnt appear that our datas structure needs to be changed. According to Kaggle, the variables meanings are as follows: PassengerId - this is a unique identifier for each passenger. Survived- did the passenger survive (0 = died, 1 = survived)? Pclass - the passengers ticket class. Name - the passengers name. Sex - the passengers biological gender. Age - the passengers age. SibSp - the amount of siblings and / or spouses the passenger has on board the Titanic. Parch - the amount of parents and / or children the passenger has on board the Titanic. Ticket - the passengers ticket number. Fare - the passengers ticket fare. Cabin - the passengers cabin number. Embarked - from which port did the passenger board the Titanic (S = Southampton, C = Cherbourg, Q = Queenstown)? Furthermore, I also see some NAs present in some of our variables - just how many NAs are there in both modelDatas and testDatas variables? colSums(is.na(modelData)) ## PassengerId Survived Pclass Name Sex Age ## 0 0 0 0 0 177 ## SibSp Parch Ticket Fare Cabin Embarked ## 0 0 0 0 687 2 colSums(is.na(testData)) ## PassengerId Pclass Name Sex Age SibSp ## 0 0 0 0 86 0 ## Parch Ticket Fare Cabin Embarked ## 0 0 1 327 0 Based on the above codeblocks (and Kaggles description of the variables that we have to work with), I noted the following: Our categorical variables (i.e., Sex, Pclass, and Embarked) are not factors like they should be. We have tons of NAs in the Cabin variable of both modelData and testData. I think we should discard this variable from both sets of data as a significant chunk (i.e., more than 77% of our variables data) is missing. A good chunk of our passengers ages also appear to be missing. Were going to need to find something to impute those missing ages with if we dont want to omit these passengers altogether. We also have some missing data in some of the other variables. While we could impute these pieces of missing data with something, we could also remove these passengers or leave them be (depending on the variables that we do end up using to train our models). PassengerId in modelData is useless and should be removed. So, lets get started with 1., 2., and 5. first: # Task 1 modelData$Survived &lt;- as.factor(modelData$Survived) modelData$Sex &lt;- as.factor(modelData$Sex) modelData$Embarked &lt;- as.factor(modelData$Embarked) modelData$Pclass &lt;- as.factor(modelData$Pclass) testData$Sex &lt;- as.factor(testData$Sex) testData$Embarked &lt;- as.factor(testData$Embarked) testData$Pclass &lt;- as.factor(testData$Pclass) # Task 2 + 5 modelData &lt;- select(modelData, -c(PassengerId, Cabin)) testData &lt;- select(testData, -c(Cabin)) And just to verify that we indeed do what we set out to do, lets call the str() function again: str(modelData) ## tibble [891 x 10] (S3: tbl_df/tbl/data.frame) ## $ Survived: Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 2 2 2 1 1 1 1 2 2 ... ## $ Pclass : Factor w/ 3 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;: 3 1 3 1 3 3 1 3 3 2 ... ## $ Name : chr [1:891] &quot;Braund, Mr. Owen Harris&quot; &quot;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&quot; &quot;Heikkinen, Miss. Laina&quot; &quot;Futrelle, Mrs. Jacques Heath (Lily May Peel)&quot; ... ## $ Sex : Factor w/ 2 levels &quot;female&quot;,&quot;male&quot;: 2 1 1 1 2 2 2 2 1 1 ... ## $ Age : num [1:891] 22 38 26 35 35 NA 54 2 27 14 ... ## $ SibSp : num [1:891] 1 1 0 1 0 0 0 3 0 1 ... ## $ Parch : num [1:891] 0 0 0 0 0 0 0 1 2 0 ... ## $ Ticket : chr [1:891] &quot;A/5 21171&quot; &quot;PC 17599&quot; &quot;STON/O2. 3101282&quot; &quot;113803&quot; ... ## $ Fare : num [1:891] 7.25 71.28 7.92 53.1 8.05 ... ## $ Embarked: Factor w/ 3 levels &quot;C&quot;,&quot;Q&quot;,&quot;S&quot;: 3 1 3 3 3 2 3 3 3 1 ... str(testData) ## tibble [418 x 10] (S3: tbl_df/tbl/data.frame) ## $ PassengerId: num [1:418] 892 893 894 895 896 897 898 899 900 901 ... ## $ Pclass : Factor w/ 3 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;: 3 3 2 3 3 3 3 2 3 3 ... ## $ Name : chr [1:418] &quot;Kelly, Mr. James&quot; &quot;Wilkes, Mrs. James (Ellen Needs)&quot; &quot;Myles, Mr. Thomas Francis&quot; &quot;Wirz, Mr. Albert&quot; ... ## $ Sex : Factor w/ 2 levels &quot;female&quot;,&quot;male&quot;: 2 1 2 2 1 2 1 2 1 2 ... ## $ Age : num [1:418] 34.5 47 62 27 22 14 30 26 18 21 ... ## $ SibSp : num [1:418] 0 1 0 0 1 0 0 1 0 2 ... ## $ Parch : num [1:418] 0 0 0 0 1 0 0 1 0 0 ... ## $ Ticket : chr [1:418] &quot;330911&quot; &quot;363272&quot; &quot;240276&quot; &quot;315154&quot; ... ## $ Fare : num [1:418] 7.83 7 9.69 8.66 12.29 ... ## $ Embarked : Factor w/ 3 levels &quot;C&quot;,&quot;Q&quot;,&quot;S&quot;: 2 3 2 3 3 3 2 3 1 3 ... And it appears that we did accomplish our goal! However, I think its worth noting that of all the categorical variables that we have in modelData and testData, that Sex and Embarked are not encoded. Depending on the model that we build in the end, this may or may be a concern, but well definitely cross that bridge when we come to it! "],["exploratory-data-analysis.html", "3.4 Exploratory Data Analysis", " 3.4 Exploratory Data Analysis Before we begin building and training our models, it helps to explore the data a bit first. Doing so not only gives us a better understanding of the data that were dealing with, but also helps us uncover hidden (and perhaps significant) relationships that we can then use when we finally begin building our model5. In this portion of the workflow, we will be using modelData exclusively. Like I previously mentioned, testData is the set of data that well be applying our predictor to once were happy with its performance - because of this, we shouldnt touch it now lest the model we build becomes prone to overfitting6. 3.4.1 Understanding feature distribution by survival status I think we can start by observing the distribution of our variables by survival status. Doing so not only allows us to understand the distribution of our data, but also potentially understand which feature(s) are important in determining ones survival status. I also used the log transform of our data lest ggplot2 squashes our boxplots. modelData %&gt;% select(-c(Ticket, Embarked, Name, Pclass, Sex)) %&gt;% na.omit() %&gt;% melt(id.var = &#39;Survived&#39;) %&gt;% ggplot(aes(x = Survived, y = log(value))) + geom_boxplot(aes(fill = Survived)) + facet_wrap(~variable, ncol = 2) + labs(title = &quot;Distribution of Numerical Features by Survival Status&quot;, x = &quot;Feature&quot;, y = &quot;log(numerical feature)&quot;, fill = &quot;Survived?&quot;) + scale_fill_discrete(labels = c(&quot;No&quot;, &quot;Yes&quot;)) ## Warning: Removed 999 rows containing non-finite values (stat_boxplot). Unfortunately, I dont think that the boxplots above show anything useful. We see that those who died had more or less the same amount of spouses and / or siblings and / or parents and / or children (this also implies that a good chunk of our passengers were travelling alone). Furthermore, neither age nor fare paid seem to vary too much between dead and alive passengers. 3.4.2 Correlation analysis with numerical variables Our numerical variables alone dont seem to to be a good predictor of ones survival status. However, I also wonder if any of these numerical variables also share relationships with one another: modelData %&gt;% select(-c(Ticket, Embarked, Name, Pclass, Sex, Survived)) %&gt;% na.omit() %&gt;% cor() %&gt;% corrplot.mixed() This doesnt seem to be the case either. At best, it seems to imply that SibSp and Parch are somewhat related (i.e., the more siblings and / or spouses that one has on board the Titanic, the more parents and / or children the passenger on board has too) - something similar can probably also be said for Age and SibSp. However, we should still take the aforementioned with a grain of salt as the Pearson correlation coefficient between these pairs of variables are only 0.38 and -0.31. On the plus side, if we do end up using these numerical features in say - a logistic regression model - then colinearity isnt an issue. 3.4.3 Exploring passengers passenger classes Our numerical variables seem to do a poor job in predicting the survival status of our passengers (at least by themselves). Hence, might more passengers have survived based on their passenger classes? modelData %&gt;% select(c(Pclass, Survived)) %&gt;% na.omit() %&gt;% ggplot(aes(x = Survived)) + geom_bar(aes(fill = Survived)) + facet_wrap(~Pclass) + labs(title = &quot;Amount of Survivors by Passenger Class&quot;, x = &quot;Passenger Class&quot;, y = &quot;Amount of Passengers&quot;, fill = &quot;Survived?&quot;) + scale_fill_discrete(labels = c(&quot;No&quot;, &quot;Yes&quot;)) + theme_bw() + theme(axis.text.x = element_blank()) I think moving forward, Pclass is one of the variables that we can use in our models. We see that first class passengers survived the most, followed by second class passengers, and lastly, third class passengers. This is also in line with what I found on the internet: Third class accommodations were located at the bottom of the Titanic. Second class accommodations were located at the aft (i.e., the back of the Titanic). First class accommodations were located on the upper decks of the Titanic. 3.4.3.1 Passenger classes by port embarked For instance, if variable A is highly correlated with variable B, then this tells us that we shouldnt use both variables A and B in a linear model. This is a phenomena in machine learning whereby your model performs well on its training data, but performs poorly otherwise. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
